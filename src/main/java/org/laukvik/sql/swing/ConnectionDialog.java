/*
 * Copyright (C) 2015 Morten Laukvik <morten@laukvik.no>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.laukvik.sql.swing;

import javax.swing.JOptionPane;
import org.laukvik.sql.DatabaseConnection;

/**
 *
 * @author Morten Laukvik <morten@laukvik.no>
 */
public class ConnectionDialog extends javax.swing.JDialog {

    private final DatabaseConnection connection;
    private final ConnectionDialogListener listener;

    /**
     * Creates new form ConnectionPanel
     *
     * @param connection
     */
    public ConnectionDialog(DatabaseConnection connection, ConnectionDialogListener listener) {
        super();
        this.connection = connection;
        this.listener = listener;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        driverLabel = new javax.swing.JLabel();
        databaseTypeComboBox = new javax.swing.JComboBox();
        serverTextField = new javax.swing.JTextField();
        serverLabel = new javax.swing.JLabel();
        schemaTextField = new javax.swing.JTextField();
        schemaLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        testButton = new javax.swing.JButton();

        setTitle(connection.getFilename());
        setAlwaysOnTop(true);
        setResizable(false);
        setSize(new java.awt.Dimension(430, 330));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        driverLabel.setText("Database type");
        getContentPane().add(driverLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 528, -1));

        databaseTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL", "PostgreSQL", "Microsoft SQL" }));
        databaseTypeComboBox.setSelectedItem(connection.getDatabase());
        getContentPane().add(databaseTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 400, -1));

        serverTextField.setText(connection.getServer());
        getContentPane().add(serverTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 400, -1));

        serverLabel.setText("Server");
        getContentPane().add(serverLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 390, -1));

        schemaTextField.setText(connection.getDatabase());
        getContentPane().add(schemaTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 270, -1));

        schemaLabel.setText("Schema");
        getContentPane().add(schemaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 260, -1));

        portLabel.setText("Port");
        getContentPane().add(portLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 90, -1));

        portTextField.setText(connection.getPort());
        getContentPane().add(portTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 110, -1));

        userLabel.setText("User");
        getContentPane().add(userLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 190, -1));

        passwordLabel.setText("Password");
        getContentPane().add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, 170, -1));

        userTextField.setText(connection.getUser());
        getContentPane().add(userTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 200, -1));

        passwordTextField.setText(connection.getPassword());
        getContentPane().add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 190, -1));

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        getContentPane().add(okButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, 120, -1));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 120, -1));

        testButton.setText("Test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        getContentPane().add(testButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        listener.accepted(connection);

        this.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        listener.denied();
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        boolean success = listener.canConnect(connection);
        if (success) {
            JOptionPane.showMessageDialog(this, "Successfully connected to database.");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to connect to database.");
        }
    }//GEN-LAST:event_testButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox databaseTypeComboBox;
    private javax.swing.JLabel driverLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel schemaLabel;
    private javax.swing.JTextField schemaTextField;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField serverTextField;
    private javax.swing.JButton testButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables
}
