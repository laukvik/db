package org.laukvik.sql;

import java.io.File;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Test;
import org.laukvik.csv.ParseException;
import org.laukvik.sql.ddl.Column;
import org.laukvik.sql.ddl.DateColumn;
import org.laukvik.sql.ddl.ForeignKey;
import org.laukvik.sql.ddl.IntegerColumn;
import org.laukvik.sql.ddl.Table;
import org.laukvik.sql.ddl.VarCharColumn;

/**
 * Created by morten on 16.10.2015.
 */
public class TableTest {

    @Test(expected = IllegalArgumentException.class)
    public void shouldFailWithNullName() {
        Table t = new Table(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldFailWithEmptyName() {
        Table t = new Table("");
    }

    public static File getTestFolder() {
        ClassLoader classLoader = org.laukvik.sql.TableTest.class.getClassLoader();
        return new File(classLoader.getResource("").getFile());
    }

    public static File getResource(String filename) {
        ClassLoader classLoader = org.laukvik.sql.TableTest.class.getClassLoader();
        return new File(classLoader.getResource(filename).getFile());
    }

    @Test
    public void shouldReadMetaData() throws IOException, ParseException {
        File tmp = File.createTempFile("org.laukvik.sql.Table", ".csv");

        ForeignKey fk = new ForeignKey("customer", "customer_id");
        {
            Table t = new Table("Customer");
            //
            IntegerColumn id = new IntegerColumn("id");
            id.setAutoGenerated(true);
            id.setAutoIncrement(true);
            id.setAllowNulls(false);
            id.setPrimaryKey(true);
            id.setComments("ID for customer");
            t.addColumn(id);
            //
            VarCharColumn firstName = new VarCharColumn("first_name");
            firstName.setSize(32);
            firstName.setDefaultValue("Ukjent");
            firstName.setAllowNulls(true);
            t.addColumn(firstName);
            //
            IntegerColumn customer_id = new IntegerColumn("customer_id");
            customer_id.setForeignKey(fk);
            t.addColumn(customer_id);
            //
            DateColumn birth = new DateColumn("birth");
            birth.setFormat("dd/MM/yyyy");
            t.addColumn(birth);
            //
//            Exporter.createMetaData(t, tmp);
        }

        {
            Table t = Importer.readTableMetadata("Customer", tmp);
            Assert.assertEquals("Should have same columns", 4, t.getColumns().size());
            {
                Column c = t.getColumns().get(0);
                Assert.assertEquals("Class of column should be same", IntegerColumn.class, c.getClass());
                Assert.assertEquals("Name of column should be same", "id", c.getName());
                Assert.assertEquals("Should be auto generated", true, c.isAutoGenerated());
                Assert.assertEquals("Should be auto increment", true, c.isAutoIncrement());
                Assert.assertEquals("Should not allow null", false, c.isAllowNulls());
                Assert.assertEquals("Should be primary key", true, c.isPrimaryKey());
                Assert.assertEquals("Should have comments", "ID for customer", c.getComments());
            }
            {
                Column c = t.getColumns().get(1);
                Assert.assertEquals("Class of column should be same", VarCharColumn.class, c.getClass());
                Assert.assertEquals("Name of column should be same", "first_name", c.getName());
                Assert.assertEquals("Should not be auto generated", false, c.isAutoGenerated());
                Assert.assertEquals("Should not be auto increment", false, c.isAutoIncrement());
                Assert.assertEquals("Should allow null", true, c.isAllowNulls());
                Assert.assertEquals("Should have default value", "Ukjent", c.getDefaultValue());
            }
            {
                Column c = t.getColumns().get(2);
                Assert.assertEquals("Class of column should be same", IntegerColumn.class, c.getClass());
                Assert.assertEquals("Name of column should be same", "customer_id", c.getName());
                Assert.assertEquals("Should have same foreign key", fk, c.getForeignKey());
            }
            {
                Column c = t.getColumns().get(3);
                Assert.assertEquals("Class of column should be same", DateColumn.class, c.getClass());
                Assert.assertEquals("Should have format", "dd/MM/yyyy", c.getFormat());
            }
        }
    }

}
